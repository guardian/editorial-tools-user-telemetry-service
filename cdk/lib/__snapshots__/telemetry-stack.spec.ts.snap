// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The telemetry stack matches the snapshot 1`] = `
Object {
  "Outputs": Object {
    "toolstelemetryEndpoint3D34E100": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "toolstelemetry5B82C601",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "toolstelemetryDeploymentStageprodBBB563B5",
            },
            "/",
          ],
        ],
      },
    },
    "usertelemetryapitargethostname": Object {
      "Description": "hostname",
      "Value": Object {
        "Fn::GetAtt": Array [
          "usertelemetrydomainname587AEC39",
          "DistributionDomainName",
        ],
      },
    },
  },
  "Parameters": Object {
    "CertificateArn": Object {
      "Description": "ARN of ACM certificate for telemetry endpoint",
      "Type": "String",
    },
    "Hostname": Object {
      "Description": "Hostname for telemetry endpoint",
      "Type": "String",
    },
    "KinesisArn": Object {
      "Description": "ARN of the Kinesis stream to post event data",
      "Type": "String",
    },
    "MaxLogSize": Object {
      "Description": "Maximum size (in bytes) of log data from an individual request",
      "Type": "String",
    },
    "PandaSettingsKey": Object {
      "Description": "The location of the pan-domain authentication settings file",
      "Type": "String",
    },
    "Stack": Object {
      "Description": "Stack",
      "Type": "String",
    },
    "Stage": Object {
      "Description": "Stage",
      "Type": "String",
    },
  },
  "Resources": Object {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "DependsOn": Array [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client(\\"s3\\")

CONFIGURATION_TYPES = [\\"TopicConfigurations\\", \\"QueueConfigurations\\", \\"LambdaFunctionConfigurations\\"]

def handler(event: dict, context):
    response_status = \\"SUCCESS\\"
    error_message = \\"\\"
    try:
        props = event[\\"ResourceProperties\\"]
        bucket = props[\\"BucketName\\"]
        notification_configuration = props[\\"NotificationConfiguration\\"]
        request_type = event[\\"RequestType\\"]
        managed = props.get('Managed', 'true').lower() == 'true'
        stack_id = event['StackId']

        if managed:
          config = handle_managed(request_type, notification_configuration)
        else:
          config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

        put_bucket_notification_configuration(bucket, config)
    except Exception as e:
        logging.exception(\\"Failed to put bucket notification configuration\\")
        response_status = \\"FAILED\\"
        error_message = f\\"Error: {str(e)}. \\"
    finally:
        submit_response(event, context, response_status, error_message)


def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration


def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):

  # find external notifications
  external_notifications = find_external_notifications(bucket, stack_id)

  # if delete, that's all we need
  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f\\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\\"
    return notification

  # otherwise, merge external with incoming config and augment with id
  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming
  return notifications


def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    # if the notification was created by us, we know what id to expect
    # so we can filter by it.
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\\"{stack_id}-\\")]

  return external_notifications


def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)


def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)


def submit_response(event: dict, context, response_status: str, error_message: str):
    response_body = json.dumps(
        {
            \\"Status\\": response_status,
            \\"Reason\\": f\\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\\",
            \\"PhysicalResourceId\\": event.get(\\"PhysicalResourceId\\") or event[\\"LogicalResourceId\\"],
            \\"StackId\\": event[\\"StackId\\"],
            \\"RequestId\\": event[\\"RequestId\\"],
            \\"LogicalResourceId\\": event[\\"LogicalResourceId\\"],
            \\"NoEcho\\": False,
        }
    ).encode(\\"utf-8\\")
    headers = {\\"content-type\\": \\"\\", \\"content-length\\": str(len(response_body))}
    try:
        req = urllib.request.Request(url=event[\\"ResponseURL\\"], headers=headers, data=response_body, method=\\"PUT\\")
        with urllib.request.urlopen(req) as response:
            print(response.read().decode(\\"utf-8\\"))
        print(\\"Status code: \\" + response.reason)
    except Exception as e:
        print(\\"send(..) failed executing request.urlopen(..): \\" + str(e))
",
        },
        "Description": "AWS CloudFormation handler for \\"Custom::S3BucketNotifications\\" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.7",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EventApiLambda6AA4ADA7": Object {
      "DependsOn": Array [
        "EventApiLambdaServiceRoleDefaultPolicy92CD0566",
        "EventApiLambdaServiceRole3695319B",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "composer-dist",
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "Stack",
                },
                "/",
                Object {
                  "Ref": "Stage",
                },
                "/event-api-lambda/event-api-lambda.zip",
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "APP": "tools-telemetry",
            "LOG_ENDPOINT_ENABLED": "true",
            "MAX_LOG_SIZE": Object {
              "Ref": "MaxLogSize",
            },
            "PANDA_SETTINGS_KEY": Object {
              "Ref": "PandaSettingsKey",
            },
            "STACK": Object {
              "Ref": "Stack",
            },
            "STAGE": Object {
              "Ref": "Stage",
            },
            "TELEMETRY_BUCKET_NAME": Object {
              "Ref": "usertelemetrydatabucket3242C6BD",
            },
          },
        },
        "FunctionName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "event-api-lambda-",
              Object {
                "Ref": "Stage",
              },
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "EventApiLambdaServiceRole3695319B",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "tools-telemetry",
          },
          Object {
            "Key": "Stack",
            "Value": Object {
              "Ref": "Stack",
            },
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
        "Timeout": 5,
      },
      "Type": "AWS::Lambda::Function",
    },
    "EventApiLambdaServiceRole3695319B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "tools-telemetry",
          },
          Object {
            "Key": "Stack",
            "Value": Object {
              "Ref": "Stack",
            },
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "EventApiLambdaServiceRoleDefaultPolicy92CD0566": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "usertelemetrydatabucket3242C6BD",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "usertelemetrydatabucket3242C6BD",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EventApiLambdaServiceRoleDefaultPolicy92CD0566",
        "Roles": Array [
          Object {
            "Ref": "EventApiLambdaServiceRole3695319B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EventS3LambdaA2D7D547": Object {
      "DependsOn": Array [
        "EventS3LambdaServiceRoleDefaultPolicyC5FCC514",
        "EventS3LambdaServiceRole34104ADE",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "composer-dist",
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "Stack",
                },
                "/",
                Object {
                  "Ref": "Stage",
                },
                "/event-api-lambda/event-api-lambda.zip",
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "APP": "tools-telemetry",
            "LOG_ENDPOINT_ENABLED": "true",
            "MAX_LOG_SIZE": Object {
              "Ref": "MaxLogSize",
            },
            "STACK": Object {
              "Ref": "Stack",
            },
            "STAGE": Object {
              "Ref": "Stage",
            },
            "TELEMETRY_BUCKET_NAME": Object {
              "Ref": "usertelemetrydatabucket3242C6BD",
            },
            "TELEMETRY_STREAM_NAME": Object {
              "Fn::Select": Array [
                1,
                Object {
                  "Fn::Split": Array [
                    "/",
                    Object {
                      "Fn::Select": Array [
                        5,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "KinesisArn",
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          },
        },
        "FunctionName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "event-s3-lambda-",
              Object {
                "Ref": "Stage",
              },
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "EventS3LambdaServiceRole34104ADE",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "tools-telemetry",
          },
          Object {
            "Key": "Stack",
            "Value": Object {
              "Ref": "Stack",
            },
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
        "Timeout": 5,
      },
      "Type": "AWS::Lambda::Function",
    },
    "EventS3LambdaServiceRole34104ADE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "App",
            "Value": "tools-telemetry",
          },
          Object {
            "Key": "Stack",
            "Value": Object {
              "Ref": "Stack",
            },
          },
          Object {
            "Key": "Stage",
            "Value": Object {
              "Ref": "Stage",
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "EventS3LambdaServiceRoleDefaultPolicyC5FCC514": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "usertelemetrydatabucket3242C6BD",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "usertelemetrydatabucket3242C6BD",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "kinesis:PutRecords",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "KinesisArn",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EventS3LambdaServiceRoleDefaultPolicyC5FCC514",
        "Roles": Array [
          Object {
            "Ref": "EventS3LambdaServiceRole34104ADE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "toolstelemetry5B82C601": Object {
      "Properties": Object {
        "EndpointConfiguration": Object {
          "Types": Array [
            "EDGE",
          ],
        },
        "Name": "tools-telemetry",
        "Policy": Object {
          "Statement": Array [
            Object {
              "Action": "execute-api:Invoke",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "toolstelemetryANY125892B6": Object {
      "Properties": Object {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "EventApiLambda6AA4ADA7",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Fn::GetAtt": Array [
            "toolstelemetry5B82C601",
            "RootResourceId",
          ],
        },
        "RestApiId": Object {
          "Ref": "toolstelemetry5B82C601",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "toolstelemetryANYApiPermissionTesttelemetrytoolstelemetryE8F3F55EANYBC634D42": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "EventApiLambda6AA4ADA7",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "toolstelemetry5B82C601",
              },
              "/test-invoke-stage/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "toolstelemetryANYApiPermissiontelemetrytoolstelemetryE8F3F55EANYF6883C93": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "EventApiLambda6AA4ADA7",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "toolstelemetry5B82C601",
              },
              "/",
              Object {
                "Ref": "toolstelemetryDeploymentStageprodBBB563B5",
              },
              "/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "toolstelemetryAccount7FE432C0": Object {
      "DependsOn": Array [
        "toolstelemetry5B82C601",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "toolstelemetryCloudWatchRoleA4B7D34A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "toolstelemetryCloudWatchRoleA4B7D34A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "toolstelemetryDeploymentD1BE1508291d740e975e449a268ec47f75515c08": Object {
      "DependsOn": Array [
        "toolstelemetryproxyANY35CBBD05",
        "toolstelemetryproxyF33AB25B",
        "toolstelemetryANY125892B6",
      ],
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "toolstelemetry5B82C601",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "toolstelemetryDeploymentStageprodBBB563B5": Object {
      "DependsOn": Array [
        "toolstelemetryAccount7FE432C0",
      ],
      "Properties": Object {
        "DeploymentId": Object {
          "Ref": "toolstelemetryDeploymentD1BE1508291d740e975e449a268ec47f75515c08",
        },
        "RestApiId": Object {
          "Ref": "toolstelemetry5B82C601",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "toolstelemetryproxyANY35CBBD05": Object {
      "Properties": Object {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "EventApiLambda6AA4ADA7",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "toolstelemetryproxyF33AB25B",
        },
        "RestApiId": Object {
          "Ref": "toolstelemetry5B82C601",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "toolstelemetryproxyANYApiPermissionTesttelemetrytoolstelemetryE8F3F55EANYproxy35BA1CC0": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "EventApiLambda6AA4ADA7",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "toolstelemetry5B82C601",
              },
              "/test-invoke-stage/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "toolstelemetryproxyANYApiPermissiontelemetrytoolstelemetryE8F3F55EANYproxy0B427FF1": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "EventApiLambda6AA4ADA7",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "toolstelemetry5B82C601",
              },
              "/",
              Object {
                "Ref": "toolstelemetryDeploymentStageprodBBB563B5",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "toolstelemetryproxyF33AB25B": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "toolstelemetry5B82C601",
            "RootResourceId",
          ],
        },
        "PathPart": "{proxy+}",
        "RestApiId": Object {
          "Ref": "toolstelemetry5B82C601",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "usertelemetrydatabucket3242C6BD": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": "user-telemetry-data",
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "usertelemetrydatabucketAllowBucketNotificationsTotelemetryEventS3LambdaF393B67E5EA85F26": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "EventS3LambdaA2D7D547",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "usertelemetrydatabucket3242C6BD",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "usertelemetrydatabucketNotificationsE14CD60E": Object {
      "DependsOn": Array [
        "usertelemetrydatabucketAllowBucketNotificationsTotelemetryEventS3LambdaF393B67E5EA85F26",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "usertelemetrydatabucket3242C6BD",
        },
        "Managed": true,
        "NotificationConfiguration": Object {
          "LambdaFunctionConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "LambdaFunctionArn": Object {
                "Fn::GetAtt": Array [
                  "EventS3LambdaA2D7D547",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "usertelemetrydomainname587AEC39": Object {
      "Properties": Object {
        "CertificateArn": Object {
          "Ref": "CertificateArn",
        },
        "DomainName": Object {
          "Ref": "Hostname",
        },
        "EndpointConfiguration": Object {
          "Types": Array [
            "EDGE",
          ],
        },
      },
      "Type": "AWS::ApiGateway::DomainName",
    },
    "usertelemetrydomainnameMaptelemetrytoolstelemetryE8F3F55E99913414": Object {
      "Properties": Object {
        "BasePath": "",
        "DomainName": Object {
          "Ref": "usertelemetrydomainname587AEC39",
        },
        "RestApiId": Object {
          "Ref": "toolstelemetry5B82C601",
        },
        "Stage": Object {
          "Ref": "toolstelemetryDeploymentStageprodBBB563B5",
        },
      },
      "Type": "AWS::ApiGateway::BasePathMapping",
    },
  },
}
`;
